// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dnahurnyi/proxybot/bot (interfaces: Client)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	bot "github.com/dnahurnyi/proxybot/bot"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateChannelForTag mocks base method.
func (m *MockClient) CreateChannelForTag(arg0 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannelForTag", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannelForTag indicates an expected call of CreateChannelForTag.
func (mr *MockClientMockRecorder) CreateChannelForTag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannelForTag", reflect.TypeOf((*MockClient)(nil).CreateChannelForTag), arg0)
}

// ForwardMsgTo mocks base method.
func (m *MockClient) ForwardMsgTo(arg0, arg1, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForwardMsgTo", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForwardMsgTo indicates an expected call of ForwardMsgTo.
func (mr *MockClientMockRecorder) ForwardMsgTo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForwardMsgTo", reflect.TypeOf((*MockClient)(nil).ForwardMsgTo), arg0, arg1, arg2)
}

// ForwardMsgToMaster mocks base method.
func (m *MockClient) ForwardMsgToMaster(arg0, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForwardMsgToMaster", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForwardMsgToMaster indicates an expected call of ForwardMsgToMaster.
func (mr *MockClientMockRecorder) ForwardMsgToMaster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForwardMsgToMaster", reflect.TypeOf((*MockClient)(nil).ForwardMsgToMaster), arg0, arg1)
}

// GetChannelTitle mocks base method.
func (m *MockClient) GetChannelTitle(arg0 int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelTitle", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelTitle indicates an expected call of GetChannelTitle.
func (mr *MockClientMockRecorder) GetChannelTitle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelTitle", reflect.TypeOf((*MockClient)(nil).GetChannelTitle), arg0)
}

// ListChannels mocks base method.
func (m *MockClient) ListChannels() ([]bot.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannels")
	ret0, _ := ret[0].([]bot.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChannels indicates an expected call of ListChannels.
func (mr *MockClientMockRecorder) ListChannels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannels", reflect.TypeOf((*MockClient)(nil).ListChannels))
}

// MarkAsRead mocks base method.
func (m *MockClient) MarkAsRead(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsRead", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsRead indicates an expected call of MarkAsRead.
func (mr *MockClientMockRecorder) MarkAsRead(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsRead", reflect.TypeOf((*MockClient)(nil).MarkAsRead), arg0)
}

// MessageToMaster mocks base method.
func (m *MockClient) MessageToMaster(arg0 int64, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageToMaster", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessageToMaster indicates an expected call of MessageToMaster.
func (mr *MockClientMockRecorder) MessageToMaster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageToMaster", reflect.TypeOf((*MockClient)(nil).MessageToMaster), arg0, arg1)
}

// SubscribeToChannel mocks base method.
func (m *MockClient) SubscribeToChannel(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToChannel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeToChannel indicates an expected call of SubscribeToChannel.
func (mr *MockClientMockRecorder) SubscribeToChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToChannel", reflect.TypeOf((*MockClient)(nil).SubscribeToChannel), arg0)
}
